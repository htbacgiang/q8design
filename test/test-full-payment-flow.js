// Script ƒë·ªÉ test to√†n b·ªô payment flow
// Ch·∫°y l·ªánh: node test/test-full-payment-flow.js

const axios = require('axios');

// Th√¥ng tin server
const BASE_URL = 'http://localhost:3000';
// THAY ƒê·ªîI URL N√ÄY B·∫∞NG NGROK URL TH·ª∞C C·ª¶A B·∫†N!
// V√≠ d·ª•: https://a1b2c3d4.ngrok.io
const NGROK_URL = 'https://8bc966d6b66a.ngrok-free.app'; // <-- THAY ƒê·ªîI NGAY ƒê√ÇY

async function testPaymentFlow() {
  console.log('üöÄ Testing Full Payment Flow...\n');

  try {
    // B∆∞·ªõc 1: T·∫°o thanh to√°n
    console.log('1Ô∏è‚É£  T·∫°o thanh to√°n SEPAY...');
    const createPaymentResponse = await axios.post(`${BASE_URL}/api/create-sepay-payment`, {
      amount: 100000,
      userId: 'test-user-123'
    });

    if (!createPaymentResponse.data.success) {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o thanh to√°n');
    }

    const paymentCode = createPaymentResponse.data.paymentCode;
    console.log('‚úÖ Payment created:', paymentCode);

    // B∆∞·ªõc 2: Ki·ªÉm tra status ban ƒë·∫ßu
    console.log('\n2Ô∏è‚É£  Ki·ªÉm tra status ban ƒë·∫ßu...');
    const initialStatusResponse = await axios.get(`${BASE_URL}/api/check-sepay-status?paymentCode=${paymentCode}&timestamp=${Date.now()}`, {
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });

    console.log('üìä Initial Status:', initialStatusResponse.data.payment.status);

    // B∆∞·ªõc 3: M√¥ ph·ªèng callback t·ª´ SEPAY
    console.log('\n3Ô∏è‚É£  M√¥ ph·ªèng callback thanh to√°n th√†nh c√¥ng...');
    const callbackResponse = await axios.post(`${NGROK_URL}/api/sepay-webhook-real`, {
      gateway: 'TPBank',
      transactionDate: new Date().toISOString(),
      accountNumber: '03924302701',
      transferType: 'in',
      transferAmount: 100000,
      referenceCode: paymentCode,
      description: 'Test payment callback'
    });

    console.log('üìä Callback Response:', callbackResponse.data);

    // B∆∞·ªõc 4: Ki·ªÉm tra status sau callback
    console.log('\n4Ô∏è‚É£  Ki·ªÉm tra status sau callback...');
    // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ callback ƒë∆∞·ª£c x·ª≠ l√Ω
    await new Promise(resolve => setTimeout(resolve, 2000));

    const finalStatusResponse = await axios.get(`${BASE_URL}/api/check-sepay-status?paymentCode=${paymentCode}&timestamp=${Date.now()}`, {
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });

    console.log('üìä Final Status:', finalStatusResponse.data.payment.status);

    // B∆∞·ªõc 5: K·∫øt lu·∫≠n
    console.log('\nüéâ K·∫øt qu·∫£:');
    if (finalStatusResponse.data.payment.status === 'paid') {
      console.log('‚úÖ Payment flow ho·∫°t ƒë·ªông ho√†n h·∫£o!');
      console.log('‚úÖ Status chuy·ªÉn t·ª´ pending ‚Üí paid');
      console.log('‚úÖ Callback ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng');
      console.log('‚úÖ API check-sepay-status ho·∫°t ƒë·ªông ƒë√∫ng');
    } else {
      console.log('‚ùå Payment flow c√≥ v·∫•n ƒë·ªÅ');
      console.log('‚ùå Status ch∆∞a chuy·ªÉn sang paid');
      console.log('üí° Ki·ªÉm tra logs c·ªßa server ƒë·ªÉ debug');
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data || error.message);

    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:');
      console.log('1. Ch·∫°y server: npm run dev');
      console.log('2. Ch·∫°y ngrok: ngrok http 3000');
      console.log('3. C·∫≠p nh·∫≠t NGROK_URL trong script n√†y');
      console.log('4. ƒê·∫£m b·∫£o webhook endpoint accessible t·ª´ internet');
    }
  }
}

// Ch·∫°y test
testPaymentFlow();

// Ho·∫∑c test v·ªõi payment code c·ª• th·ªÉ t·ª´ command line
if (process.argv.length > 2) {
  const customPaymentCode = process.argv[2];
  console.log(`üß™ Testing with specific payment code: ${customPaymentCode}`);

  // Ch·ªâ test callback v√† status check
  testCallbackAndStatus(customPaymentCode);
}

async function testCallbackAndStatus(paymentCode) {
  try {
    // Test callback
    console.log('\nüì§ Sending callback...');
    const callbackResponse = await axios.post(`${NGROK_URL}/api/sepay-webhook-real`, {
      gateway: 'TPBank',
      transactionDate: new Date().toISOString(),
      accountNumber: '03924302701',
      transferType: 'in',
      transferAmount: 100000,
      referenceCode: paymentCode,
      description: 'Test callback'
    });
    console.log('Callback result:', callbackResponse.data);

    // Ch·ªù x·ª≠ l√Ω
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Test status check
    console.log('\nüìä Checking status...');
    const statusResponse = await axios.get(`${BASE_URL}/api/check-sepay-status?paymentCode=${paymentCode}&timestamp=${Date.now()}`, {
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    console.log('Status result:', statusResponse.data);

  } catch (error) {
    console.error('‚ùå Callback/Status test failed:', error.response?.data || error.message);
  }
}