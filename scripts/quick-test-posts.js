// Quick script to create test posts without needing .env.local
const mongoose = require('mongoose');

// Hardcode a simple connection for testing
const MONGODB_URI = "mongodb://localhost:27017/q8design_test"; // Local MongoDB for testing

const PostSchema = new mongoose.Schema({
  title: { type: String, required: true, trim: true },
  slug: { type: String, required: true, trim: true, unique: true },
  content: { type: String, required: true, trim: true },
  category: { type: String },
  meta: { type: String, required: true, trim: true },
  tags: { type: [String] },
  thumbnail: {
    url: String,
    public_id: String,
  },
  author: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  isDraft: { type: Boolean, default: false }, // Default to published
}, { timestamps: true });

const Post = mongoose.model("Post", PostSchema);

const testPosts = [
  {
    title: "B√†i vi·∫øt test s·ªë 1 - Thi·∫øt k·∫ø n·ªôi th·∫•t hi·ªán ƒë·∫°i",
    slug: "bai-viet-test-so-1-thiet-ke-noi-that-hien-dai",
    content: "<p>ƒê√¢y l√† n·ªôi dung b√†i vi·∫øt test v·ªÅ thi·∫øt k·∫ø n·ªôi th·∫•t hi·ªán ƒë·∫°i. Thi·∫øt k·∫ø hi·ªán ƒë·∫°i t·∫≠p trung v√†o s·ª± ƒë∆°n gi·∫£n v√† ch·ª©c nƒÉng.</p>",
    category: "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i",
    meta: "B√†i vi·∫øt test v·ªÅ thi·∫øt k·∫ø n·ªôi th·∫•t hi·ªán ƒë·∫°i v√† c√°c xu h∆∞·ªõng thi·∫øt k·∫ø m·ªõi nh·∫•t.",
    tags: ["thi·∫øt k·∫ø hi·ªán ƒë·∫°i", "n·ªôi th·∫•t", "test"],
    isDraft: false
  },
  {
    title: "B√†i vi·∫øt test s·ªë 2 - Phong c√°ch Scandinavian",
    slug: "bai-viet-test-so-2-phong-cach-scandinavian",
    content: "<p>ƒê√¢y l√† n·ªôi dung b√†i vi·∫øt test v·ªÅ phong c√°ch Scandinavian. Phong c√°ch n√†y ƒë·∫∑c tr∆∞ng b·ªüi s·ª± t·ªëi gi·∫£n v√† ·∫•m √°p.</p>",
    category: "Phong c√°ch thi·∫øt k·∫ø",
    meta: "B√†i vi·∫øt test v·ªÅ phong c√°ch thi·∫øt k·∫ø Scandinavian v√† c√°ch √°p d·ª•ng v√†o kh√¥ng gian s·ªëng.",
    tags: ["scandinavian", "phong c√°ch", "test"],
    isDraft: false
  },
  {
    title: "B√†i vi·∫øt test s·ªë 3 - M·∫πo trang tr√≠ nh√†",
    slug: "bai-viet-test-so-3-meo-trang-tri-nha",
    content: "<p>ƒê√¢y l√† n·ªôi dung b√†i vi·∫øt test v·ªÅ m·∫πo trang tr√≠ nh√†. Nh·ªØng m·∫πo hay gi√∫p t·∫°o ra kh√¥ng gian s·ªëng ƒë·∫πp v√† ti·ªán nghi.</p>",
    category: "M·∫πo thi·∫øt k·∫ø",
    meta: "B√†i vi·∫øt test v·ªÅ c√°c m·∫πo trang tr√≠ nh√† v√† t·∫°o kh√¥ng gian s·ªëng ho√†n h·∫£o.",
    tags: ["trang tr√≠", "m·∫πo thi·∫øt k·∫ø", "test"],
    isDraft: false
  }
];

async function createQuickTestPosts() {
  try {
    console.log("üîå Connecting to local MongoDB...");
    await mongoose.connect(MONGODB_URI);
    console.log("‚úÖ Connected successfully");

    // Clear existing posts
    await Post.deleteMany({});
    console.log("üßπ Cleared existing posts");

    // Create test posts
    const createdPosts = await Post.insertMany(testPosts);
    console.log(`‚úÖ Created ${createdPosts.length} test posts:`);
    
    createdPosts.forEach((post, index) => {
      console.log(`${index + 1}. ${post.title}`);
      console.log(`   Slug: ${post.slug}`);
      console.log(`   isDraft: ${post.isDraft}`);
      console.log(`   Category: ${post.category}`);
    });

    // Verify
    const total = await Post.countDocuments({});
    const published = await Post.countDocuments({ isDraft: false });
    
    console.log(`\nüìä Summary:`);
    console.log(`   Total posts: ${total}`);
    console.log(`   Published posts: ${published}`);
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Disconnected");
  }
}

createQuickTestPosts();
