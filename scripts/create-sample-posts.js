// Script ƒë·ªÉ t·∫°o b√†i vi·∫øt m·∫´u
import db from "../utils/db.js";
import Post from "../models/Post.ts";

const samplePosts = [
  {
    title: "Gi·ªõi thi·ªáu v·ªÅ Q8 Design",
    slug: "gioi-thieu-ve-q8-design",
    content: "<p>Q8 Design l√† c√¥ng ty chuy√™n v·ªÅ thi·∫øt k·∫ø n·ªôi th·∫•t v√† ki·∫øn tr√∫c v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám trong ng√†nh.</p>",
    category: "Gi·ªõi thi·ªáu",
    meta: "T√¨m hi·ªÉu v·ªÅ Q8 Design v√† s·ª© m·ªánh t·∫°o ra nh·ªØng kh√¥ng gian s·ªëng ho√†n h·∫£o cho kh√°ch h√†ng.",
    tags: ["q8 design", "thi·∫øt k·∫ø n·ªôi th·∫•t", "ki·∫øn tr√∫c"],
    isDraft: false,
    thumbnail: {
      url: "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=600&fit=crop",
      public_id: "q8_intro_1"
    }
  },
  {
    title: "Xu h∆∞·ªõng thi·∫øt k·∫ø n·ªôi th·∫•t 2025",
    slug: "xu-huong-thiet-ke-noi-that-2025",
    content: "<p>Kh√°m ph√° nh·ªØng xu h∆∞·ªõng thi·∫øt k·∫ø n·ªôi th·∫•t m·ªõi nh·∫•t trong nƒÉm 2025.</p>",
    category: "Xu h∆∞·ªõng",
    meta: "C·∫≠p nh·∫≠t nh·ªØng xu h∆∞·ªõng thi·∫øt k·∫ø n·ªôi th·∫•t hot nh·∫•t nƒÉm 2025.",
    tags: ["xu h∆∞·ªõng", "2025", "thi·∫øt k·∫ø n·ªôi th·∫•t"],
    isDraft: false,
    thumbnail: {
      url: "https://images.unsplash.com/photo-1616486338812-3dadae4b4ace?w=800&h=600&fit=crop",
      public_id: "trend_2025_1"
    }
  },
  {
    title: "M·∫πo trang tr√≠ ph√≤ng kh√°ch hi·ªán ƒë·∫°i",
    slug: "meo-trang-tri-phong-khach-hien-dai",
    content: "<p>Nh·ªØng m·∫πo hay ƒë·ªÉ trang tr√≠ ph√≤ng kh√°ch theo phong c√°ch hi·ªán ƒë·∫°i.</p>",
    category: "M·∫πo thi·∫øt k·∫ø",
    meta: "H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch trang tr√≠ ph√≤ng kh√°ch ƒë·∫πp v√† hi·ªán ƒë·∫°i.",
    tags: ["ph√≤ng kh√°ch", "trang tr√≠", "hi·ªán ƒë·∫°i"],
    isDraft: false,
    thumbnail: {
      url: "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=600&fit=crop",
      public_id: "living_room_1"
    }
  },
  {
    title: "Phong c√°ch thi·∫øt k·∫ø Scandinavian",
    slug: "phong-cach-thiet-ke-scandinavian",
    content: "<p>T√¨m hi·ªÉu v·ªÅ phong c√°ch thi·∫øt k·∫ø Scandinavian v√† c√°ch √°p d·ª•ng v√†o kh√¥ng gian s·ªëng.</p>",
    category: "Phong c√°ch thi·∫øt k·∫ø",
    meta: "Kh√°m ph√° v·∫ª ƒë·∫πp t·ªëi gi·∫£n v√† ·∫•m √°p c·ªßa phong c√°ch Scandinavian.",
    tags: ["scandinavian", "t·ªëi gi·∫£n", "phong c√°ch"],
    isDraft: false
  },
  {
    title: "C√°ch ch·ªçn m√†u s·∫Øc cho kh√¥ng gian s·ªëng",
    slug: "cach-chon-mau-sac-cho-khong-gian-song",
    content: "<p>H∆∞·ªõng d·∫´n c√°ch ch·ªçn m√†u s·∫Øc ph√π h·ª£p cho t·ª´ng kh√¥ng gian trong nh√†.</p>",
    category: "M√†u s·∫Øc",
    meta: "B√≠ quy·∫øt ch·ªçn m√†u s·∫Øc t·∫°o c·∫£m gi√°c tho·∫£i m√°i v√† h√†i h√≤a cho ng√¥i nh√†.",
    tags: ["m√†u s·∫Øc", "trang tr√≠", "kh√¥ng gian"],
    isDraft: false
  }
];

async function createSamplePosts() {
  try {
    console.log("üîå Connecting to database...");
    await db.connectDb();
    console.log("‚úÖ Connected successfully");

    // Check current posts
    const currentCount = await Post.countDocuments({});
    console.log(`üìä Current posts in database: ${currentCount}`);

    // Don't create if we already have posts
    if (currentCount > 5) {
      console.log("‚úÖ Database already has posts, skipping creation");
      return;
    }

    // Create sample posts
    console.log("üìù Creating sample posts...");
    const createdPosts = await Post.insertMany(samplePosts);
    
    console.log(`‚úÖ Successfully created ${createdPosts.length} sample posts:`);
    createdPosts.forEach((post, index) => {
      console.log(`${index + 1}. ${post.title} (${post.slug})`);
    });

    // Verify
    const total = await Post.countDocuments({});
    const published = await Post.countDocuments({ isDraft: false });
    
    console.log(`\nüìä Final Summary:`);
    console.log(`   Total posts: ${total}`);
    console.log(`   Published posts: ${published}`);
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
  } finally {
    process.exit(0);
  }
}

createSamplePosts();
